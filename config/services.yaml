# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Taxes\Calculator:
        arguments:
            $tva: 20

    App\Taxes\Detector:
        arguments:
            $seuil: 100

    Cocur\Slugify\Slugify: ~

    App\EventDispatcher\PrenomListener:
        tags: [
            {
                name: kernel.event_listener,
                event: kernel.request,
                method: addPrenomToAttributes
            },
            {
                name: kernel.event_listener,
                event: kernel.request,
                method: test1
            },
            {
                name: kernel.event_listener,
                event: kernel.response,
                method: test2
            }
        ]

#         quand le container de service se charge, quand il voit ce service là,
#    il est taggé event listener, donc je vais le présenter auprès du dispatcher,
#    je vais aussi dire qu dispatcher, on a besoin qu'il appelle la méthode addPrenomToAttributes.

#    A chaque fois que kernel.request est appelé la méthode get prénom est ajouté à la request !!